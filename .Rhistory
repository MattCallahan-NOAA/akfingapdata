message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
catch<-get_gap_catch(survey_definition_id = 47, species_code = 21740, start_year=2023, end_year=2023)
token <- "udghouehg;lihopughopaerighoaeru"
catch<-get_gap_catch(survey_definition_id = 47, species_code = 21740, start_year=2023, end_year=2023)
token<-create_token("Callahan_token.txt")
catch<-get_gap_catch(survey_definition_id = 47, species_code = 21740, start_year=2023, end_year=2023)
get_gap_length<-function(survey_definition_id=98, species_code=21740, start_year=1990, end_year=3000) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_length?"
query <- list(survey_definition_id=survey_definition_id, species_code=species_code, start_year=start_year, end_year=end_year)
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
get_gap_length<-function(survey_definition_id=98, species_code=21740, start_year=1990, end_year=3000) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_length?"
query <- list(survey_definition_id=survey_definition_id, species_code=species_code, start_year=start_year, end_year=end_year)
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
library(akfingapdata)
token<-create_token("Callahan_token.txt")
cpue<-get_gap_cpue(survey_definition_id = 98, species_code = 21740, start_year=2023, end_year=2023)
catch<-get_gap_catch(survey_definition_id = 47, species_code = 21740, start_year=2023, end_year=2023)
length<-get_gap_length(survey_definition_id = 98, species_code = 21740, start_year=2023, end_year=2023)
specimen<-get_gap_specimen(survey_definition_id = 98, species_code = 21740, start_year=2023, end_year=2023)
cpue<-get_gap_cpue(survey_definition_id = 98, species_code = 21740,  end_year=2023)
get_gap_area<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_area?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
area <- get_gap_area()
get_gap_cruise<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_cruise?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
cruise <-get_gap_cruise()
token <- "udghouehg;lihopughopaerighoaeru"
cruise <-get_gap_cruise()
token<-create_token("Callahan_token.txt")
get_gap_haul<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_haul?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
haul <- get_gap_haul()
get_gap_metadata_column<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_metadata_column?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
meta <- get_gap_metadata_column()
sf <- get_gap_split_fractions()
get_gap_split_fractions<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_split_fractions?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
sf <- get_gap_split_fractions()
get_gap_stratum_groups<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_stratum_groups?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
sg <- get_gap_stratum_groups()
get_gap_survey_design<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_survey_design?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
sd <- get_gap_survey_design()
get_gap_taxonomic_classification<-function() {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_taxonomic_classification?"
response <- httr::GET(url=url,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
tc <- get_gap_taxonomic_classification()
get_gap_agecomp<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_agecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
age<-get_gap_agecomp(survey_definition_id = 98, species_code = 21740, start_year=2023, end_year=2023)
age<-get_gap_agecomp(survey_definition_id = 98, area_id = 82, species_code = 21740, start_year=2023, end_year=2023)
rm(token)
age <- get_gap_agecomp(survey_definition_id = 98, area_id = 82, species_code = 21740, start_year=2023, end_year=2023)
token <- "udghouehg;lihopughopaerighoaeru"
age <- get_gap_agecomp(survey_definition_id = 98, area_id = 82, species_code = 21740, start_year=2023, end_year=2023)
token<-create_token("Callahan_token.txt")
age <- get_gap_agecomp(survey_definition_id = 98, area_id = 82, species_code = 21740, start_year=2023, end_year=2023)
get_gap_sizecomp<-function(survey_definition_id=98, area_id=1, species_code=21740, start_year=1990, end_year=3000) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_sizecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
get_gap_biomass<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_biomass?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
sc <-get_gap_sizecomp()
bm <- get_gap_biomass(survey_definition_id = 98, area_id = 82, species_code = 21740, start_year=2023, end_year=2023)
library(akfingapdata)
library(akfingapdata)
token<-create_token("Callahan_token.txt")
metadata<-get_gap_metadata_column()
devtools::install_github("MattCallahan-NOAA/akfingapdata")
library(akfingapdata)
token<-create_token("Callahan_token.txt")
metadata<-get_gap_metadata_column()
# download species_code
taxa<- get_gap_taxonomic_classification()
# find species codes for shortraker rockfish
taxa %>% filter(grepl("shortraker", tolower(common_name)))
library(tidyverse)
# find species codes for shortraker rockfish
taxa %>% filter(grepl("shortraker", tolower(common_name)))
# download survey, area, and stratum group tables
survey<-get_gap_survey_design()
area<-get_gap_area()
stratum<-get_gap_stratum_groups()
# download survey, area, and stratum group tables
survey<-get_gap_survey_design()
area<-get_gap_area()
stratum<-get_gap_stratum_groups()
#combine spatial lookup tables
stratum<-stratum %>%
left_join(survey %>%
# remove year specific information from survey, we only need the region codes
group_by(survey) %>%
summarize(survey_definition_id=max(survey_definition_id)),
by="survey_definition_id") %>%
left_join(area,  by=c("area_id"="area_id", "survey_definition_id"="survey_definition_id", "design_year"="design_year"))
# I get a many to one here that gives me two extra rows
# look for the western Gulf
# 805
stratum %>%
filter(survey=="GOA",
type=="REGULATORY AREA",
grepl("western", tolower(area_name))
)
# look for the western Gulf
# 805
stratum %>%
filter(survey=="GOA",
area_type=="REGULATORY AREA",
grepl("western", tolower(area_name))
)
# No agecomp data for this area/species
goasr_ages<-get_gap_agecomp(survey_definition_id = 47,
area_id = 805,
species_code = 30576,
start_year=1990,
end_year=2023)
goasr_biomass<-get_gap_biomass(survey_definition_id = 47,
area_id = 805,
species_code = 30576,
start_year=1990,
end_year=2023)
goasr_sizecomp<-get_gap_sizecomp(survey_definition_id = 47,
area_id = 805,
species_code = 30576,
start_year=1990,
end_year=2023)
head(goasr_sizecomp)
# No agecomp for shortraker at that area, run gulfwide instead.
head(get_gap_agecomp(survey_definition_id = 47,
area_id = 99903,
species_code = 30576,
start_year=1990,
end_year=2023))
# The catch table only includes records where the species were caught
goasr_catch<-get_gap_catch(survey_definition_id = 47,
species_code = 30576,
start_year=1990,
end_year=2023)
# The CPUE table includes zeros and thus has many more records
goasr_cpue<-get_gap_cpue(survey_definition_id = 47,
species_code = 30576,
start_year=1990,
end_year=2023)
goasr_length<-get_gap_length(survey_definition_id = 47,
species_code = 30576,
start_year=1990,
end_year=2023)
# The specimen table contains length, sex, weight, and age data for individual fish.
goasr_specimen<-get_gap_specimen(survey_definition_id = 47,
species_code = 30576,
start_year=1990,
end_year=2023)
head(goasr_specimen)
# Get rougheye and shortraker biomass for the WGOA
taxa %>% filter(grepl("rougheye", common_name))
myspecies <- c(30050, 30051)
goa_resr_biomass<-lapply(myspecies, FUN = function(x) get_gap_biomass(
survey_definition_id = 47,
area_id = 805,
species_code = x,
start_year=1990,
end_year=2023)) %>%
bind_rows()
head(goa_resr_biomass)
goa_resr_biomass<-lapply(myspecies, FUN = function(x) get_gap_biomass(
survey_definition_id = 47,
area_id = 805,
species_code = x,
start_year=1990,
end_year=2023)) %>%
bind_rows() %>%
arrange(year)
head(goa_resr_biomass)
goa_resr_biomass<-lapply(myspecies, FUN = function(x) get_gap_biomass(
survey_definition_id = 47,
area_id = 805,
species_code = x,
start_year=1990,
end_year=2023)) %>%
bind_rows() %>%
sort(year)
View(goa_resr_biomass)
goa_resr_biomass<-lapply(myspecies, FUN = function(x) get_gap_biomass(
survey_definition_id = 47,
area_id = 805,
species_code = x,
start_year=2007,
end_year=2023)) %>%
bind_rows() %>%
arrange(year)
head(goa_resr_biomass)
