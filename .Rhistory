#goa
test1 <- get_gap_agecomp(survey_definition_id = 47,
area_id = 99903,
species_code = 30576,
start_year=1990,
end_year=2023,
area_id_footprint = "GOA")
#goa
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 30576,
start_year=1990,
end_year=2023)
library(tidyverse)
#goa
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 30576,
start_year=1990,
end_year=2023)
#goa
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 30576,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
#goa
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99901,
species_code = 30576,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
get_gap_agecomp<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000, area_id_footprint="EBS STANDARD PLUS NW") {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_agecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
# footprint_options <- c("EBS STANDARD PLUS NW", "EBS STANDARD")
#
# if(survey_definition_id == 98 & area_id_footprint %in% footprint_options) {
#   data <- data |>
#     filter(area_id_footprint == area_id_footprint)
#   message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
# }
#
# if(survey_definition_id == 98 & !(area_id_footprint %in% footprint_options)) {
#   data <- data |>
#     filter(area_id_footprint == "EBS STANDARD PLUS NW")
#   message(paste0("Defaulting to EBS STANDARD PLUS NW area_id_footprint"))
# }
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
#goa
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 30576,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
#goa
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code =  21347,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
get_gap_agecomp<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000, area_id_footprint="EBS STANDARD PLUS NW") {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_agecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
footprint_options <- c("EBS STANDARD PLUS NW", "EBS STANDARD")
if(survey_definition_id == 98 & area_id_footprint %in% footprint_options) {
data <- data |>
filter(area_id_footprint == area_id_footprint)
message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
}
if(survey_definition_id == 98 & !(area_id_footprint %in% footprint_options)) {
data <- data |>
filter(area_id_footprint == "EBS STANDARD PLUS NW")
message(paste0("Defaulting to EBS STANDARD PLUS NW area_id_footprint"))
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
#goa
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code =  21347,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
#goa
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code =  21347,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
View(test2)
View(test3)
get_gap_agecomp<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000, area_id_footprint=NA) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_agecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
footprint_options <- c("EBS STANDARD PLUS NW", "EBS STANDARD")
if(survey_definition_id == 98 & area_id_footprint %in% footprint_options) {
data <- data |>
filter(area_id_footprint == area_id_footprint)
message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
}
if(survey_definition_id == 98 & !(area_id_footprint %in% footprint_options)) {
data <- data |>
filter(area_id_footprint == "EBS STANDARD PLUS NW")
message(paste0("Defaulting to EBS STANDARD PLUS NW area_id_footprint"))
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
test1 <- get_gap_agecomp(survey_definition_id = 47,
area_id = 99903,
species_code = 21370,
start_year=1990,
end_year=2023)
test1 <- get_gap_agecomp(survey_definition_id = 47,
area_id = 99903,
species_code = 30576,
start_year=1990,
end_year=2023)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 21370,
start_year=1990,
end_year=2023)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
test1 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 21370,
start_year=1990,
end_year=2023)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
unique(test1$area_id_footprint)
unique(test2$area_id_footprint)
unique(test3$area_id_footprint)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99900,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
unique(test2$area_id_footprint)
test1 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99901,
species_code = 21370,
start_year=1990,
end_year=2023)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99901,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 99901,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
test1 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
unique(test2$area_id_footprint)
unique(test3$area_id_footprint)
unique(test1$area_id_footprint)
test1 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023)
get_gap_agecomp<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000, area_id_footprint=NA) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_agecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
footprint_options <- c("EBS STANDARD PLUS NW", "EBS STANDARD")
if(survey_definition_id == 98 & (area_id_footprint %in% footprint_options)) {
data <- data |>
filter(area_id_footprint == area_id_footprint)
message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
}
if(survey_definition_id == 98 & !(area_id_footprint %in% footprint_options)) {
data <- data |>
filter(area_id_footprint == "EBS STANDARD PLUS NW")
message(paste0("Defaulting to EBS STANDARD PLUS NW area_id_footprint"))
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
test1 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
survey_definition_id<- 98
area_id_footprint <- "EBS STANDARD PLUS NW"
footprint_options <- c("EBS STANDARD PLUS NW", "EBS STANDARD")
if(survey_definition_id == 98 & area_id_footprint %in% footprint_options) {
test2 <- test2 |>
filter(area_id_footprint == area_id_footprint)
message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
}
if(survey_definition_id == 98 & area_id_footprint %in% footprint_options) {
test2 <- test2 %>%
filter(area_id_footprint == area_id_footprint)
message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
}
if(survey_definition_id == 98 & area_id_footprint %in% footprint_options) {
#test2 <- test2 |>
#  filter(area_id_footprint == area_id_footprint)
#message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
return("true")
}
if(survey_definition_id == 98 & area_id_footprint %in% footprint_options) {
#test2 <- test2 |>
#  filter(area_id_footprint == area_id_footprint)
#message(paste0("Agecomps calculated using ", area_id_footprint, " area_id_footprint"))
print("true")
}
test2 <- test2 |>
filter(area_id_footprint == area_id_footprint)
unique(test2$area_id_footprint)
area_id_footprint
get_gap_agecomp<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000, area_id_footprint=NA) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_agecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
footprint_options <- c("EBS STANDARD PLUS NW", "EBS STANDARD")
x <- area_id_footprint
if(survey_definition_id == 98 & x %in% footprint_options) {
data <- data |>
filter(area_id_footprint == x)
message(paste0("Agecomps calculated using ", x, " area_id_footprint"))
}
if(survey_definition_id == 98 & !(x %in% footprint_options)) {
data <- data |>
filter(area_id_footprint == "EBS STANDARD PLUS NW")
message(paste0("Defaulting to EBS STANDARD PLUS NW area_id_footprint"))
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
test1 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023)
test2 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD")
test3 <- get_gap_agecomp(survey_definition_id = 98,
area_id = 50,
species_code = 21370,
start_year=1990,
end_year=2023,
area_id_footprint = "EBS STANDARD PLUS NW")
unique(test1$area_id_footprint)
unique(test2$area_id_footprint)
unique(test3$area_id_footprint)
test2$population_count-test3$population_count
get_gap_agecomp<-function(survey_definition_id=98, area_id=99900, species_code=21740, start_year=1990, end_year=3000, area_id_footprint=NA) {
start_time <- Sys.time()
if(!exists("token")) {
message("Please create a valid Oauth token, e.g. token <- create_token('your_token.txt')")
}
query <- list(survey_definition_id=survey_definition_id, area_id=area_id, species_code=species_code, start_year=start_year, end_year=end_year)
url <- "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_agecomp?"
response <- httr::GET(url=url, query=query,
httr::add_headers(Authorization = token))
if(httr::http_error(response) ) {
stop(paste0("status code ",
response$status_code,
". For a 401 error you may need to supply a valid Oauth token, e.g. token <- create_token('your_token.txt')"))
}
data <- jsonlite::fromJSON(
httr::content(response, type = "text", encoding = "UTF-8")) |>
dplyr::bind_rows()
if(missing(survey_definition_id)) {
message("No survey_definition_id provided, defaulting to 98 (Bering Sea)")
}
if(missing(species_code)) {
message("No species_code provided, defaulting to 21740 (Pollock)")
}
if(missing(area_id)) {
message("No area_id provided, defaulting to 99900 (EBS Standard Plus NW Region: All Strata)")
}
if(missing(start_year)) {
message("No start_year provided, defaulting to 1990")
}
if(missing(end_year)) {
message("No end_year provided, defaulting to latest year")
}
footprint_options <- c("EBS STANDARD PLUS NW", "EBS STANDARD")
aif <- area_id_footprint
if(survey_definition_id == 98 & aif %in% footprint_options) {
data <- data |>
filter(area_id_footprint == aif)
message(paste0("Agecomps calculated using ", aif, " area_id_footprint"))
}
if(survey_definition_id == 98 & !(aif %in% footprint_options)) {
data <- data |>
filter(area_id_footprint == "EBS STANDARD PLUS NW")
message(paste0("Defaulting to EBS STANDARD PLUS NW area_id_footprint"))
}
end_time <- Sys.time()
message(paste("Time Elapsed:", round(end_time - start_time, 2),
units(end_time - start_time)))
return(data)
}
unique(get_gap_agecomp(
survey_definition_id = 98, area_id = 50,species_code = 21370,start_year=1990,end_year=2023,area_id_footprint = "EBS STANDARD PLUS NW")$area_id_footprint)
unique(get_gap_agecomp(
survey_definition_id = 98, area_id = 50,species_code = 21370,start_year=1990,end_year=2023,area_id_footprint = "EBS STANDARD")$area_id_footprint)
library(akfingapdata)
